// <auto-generated />
using System;
using Entities.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entities.Migrations
{
    [DbContext(typeof(RENTCARContext))]
    partial class RENTCARContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Entities.Automovile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Anio")
                        .HasColumnType("int");

                    b.Property<int>("Disponibilidad")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_Actualizado");

                    b.Property<int>("IdCategorias")
                        .HasColumnType("int")
                        .HasColumnName("ID_Categorias");

                    b.Property<int>("IdDeSedes")
                        .HasColumnType("int")
                        .HasColumnName("ID_De_Sedes");

                    b.Property<int>("IdSeguros")
                        .HasColumnType("int")
                        .HasColumnName("ID_Seguros");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Precio")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCategorias");

                    b.HasIndex("IdDeSedes");

                    b.HasIndex("IdSeguros");

                    b.ToTable("automoviles", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DescripcionCategoria")
                        .IsRequired()
                        .HasMaxLength(191)
                        .IsUnicode(false)
                        .HasColumnType("varchar(191)")
                        .HasColumnName("Descripcion_Categoria");

                    b.Property<string>("Licencia")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.ToTable("categorias", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DireccionUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Direccion_usuario");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("cliente", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.Property<DateTime>("FechaContratacion")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_contratacion");

                    b.Property<int>("IdSede")
                        .HasColumnType("int")
                        .HasColumnName("ID_Sede");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("IdSede");

                    b.ToTable("empleado", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Mantenimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Costo")
                        .HasColumnType("int");

                    b.Property<string>("DescripcionMantenimiento")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Descripcion_Mantenimiento");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaActualizado")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_Actualizado");

                    b.Property<DateTime>("FechaFinalizacion")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_Finalizacion");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_Inicio");

                    b.Property<int>("IdAutomovil")
                        .HasColumnType("int")
                        .HasColumnName("ID_Automovil");

                    b.Property<string>("TipoMantenimiento")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Tipo_Mantenimiento");

                    b.HasKey("Id");

                    b.HasIndex("IdAutomovil");

                    b.ToTable("mantenimiento", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Sede", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DireccionSede")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Direccion_Sede");

                    b.Property<string>("NombreUbi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre_Ubi");

                    b.Property<string>("Provincia")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("sedes", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Seguro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CostoSeguro")
                        .HasColumnType("int")
                        .HasColumnName("Costo_Seguro");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TipoSeguro")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Tipo_Seguro");

                    b.HasKey("Id");

                    b.ToTable("seguros", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Transaccione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CostoTotal")
                        .HasColumnType("int")
                        .HasColumnName("Costo_Total");

                    b.Property<string>("Detalles")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("FechaDevolucion")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_devolucion");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("date")
                        .HasColumnName("Fecha_inicio");

                    b.Property<int>("IdAutomovil")
                        .HasColumnType("int")
                        .HasColumnName("ID_Automovil");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int")
                        .HasColumnName("ID_Cliente");

                    b.Property<int>("IdEmpleado")
                        .HasColumnType("int")
                        .HasColumnName("ID_Empleado");

                    b.Property<DateTime>("ShipmentDate")
                        .HasColumnType("date")
                        .HasColumnName("Shipment_date");

                    b.HasKey("Id");

                    b.HasIndex("IdAutomovil");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdEmpleado");

                    b.ToTable("transacciones", (string)null);
                });

            modelBuilder.Entity("Entities.Utilities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Automovile", b =>
                {
                    b.HasOne("Entities.Entities.Categoria", "IdCategoriasNavigation")
                        .WithMany("Automoviles")
                        .HasForeignKey("IdCategorias")
                        .IsRequired()
                        .HasConstraintName("FK__automovil__ID_Ca__5441852A");

                    b.HasOne("Entities.Entities.Sede", "IdDeSedesNavigation")
                        .WithMany("Automoviles")
                        .HasForeignKey("IdDeSedes")
                        .IsRequired()
                        .HasConstraintName("FK__automovil__ID_De__5535A963");

                    b.HasOne("Entities.Entities.Seguro", "IdSegurosNavigation")
                        .WithMany("Automoviles")
                        .HasForeignKey("IdSeguros")
                        .IsRequired()
                        .HasConstraintName("FK__automovil__ID_Se__5629CD9C");

                    b.Navigation("IdCategoriasNavigation");

                    b.Navigation("IdDeSedesNavigation");

                    b.Navigation("IdSegurosNavigation");
                });

            modelBuilder.Entity("Entities.Entities.Empleado", b =>
                {
                    b.HasOne("Entities.Entities.Sede", "IdSedeNavigation")
                        .WithMany("Empleados")
                        .HasForeignKey("IdSede")
                        .IsRequired()
                        .HasConstraintName("FK__empleado__ID_Sed__4BAC3F29");

                    b.Navigation("IdSedeNavigation");
                });

            modelBuilder.Entity("Entities.Entities.Mantenimiento", b =>
                {
                    b.HasOne("Entities.Entities.Automovile", "IdAutomovilNavigation")
                        .WithMany("Mantenimientos")
                        .HasForeignKey("IdAutomovil")
                        .IsRequired()
                        .HasConstraintName("FK__mantenimi__ID_Au__59063A47");

                    b.Navigation("IdAutomovilNavigation");
                });

            modelBuilder.Entity("Entities.Entities.Transaccione", b =>
                {
                    b.HasOne("Entities.Entities.Automovile", "IdAutomovilNavigation")
                        .WithMany("Transacciones")
                        .HasForeignKey("IdAutomovil")
                        .IsRequired()
                        .HasConstraintName("FK__transacci__ID_Au__5BE2A6F2");

                    b.HasOne("Entities.Entities.Cliente", "IdClienteNavigation")
                        .WithMany("Transacciones")
                        .HasForeignKey("IdCliente")
                        .IsRequired()
                        .HasConstraintName("FK__transacci__ID_Cl__5CD6CB2B");

                    b.HasOne("Entities.Entities.Empleado", "IdEmpleadoNavigation")
                        .WithMany("Transacciones")
                        .HasForeignKey("IdEmpleado")
                        .IsRequired()
                        .HasConstraintName("FK__transacci__ID_Em__5DCAEF64");

                    b.Navigation("IdAutomovilNavigation");

                    b.Navigation("IdClienteNavigation");

                    b.Navigation("IdEmpleadoNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Utilities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Utilities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Utilities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Utilities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Entities.Automovile", b =>
                {
                    b.Navigation("Mantenimientos");

                    b.Navigation("Transacciones");
                });

            modelBuilder.Entity("Entities.Entities.Categoria", b =>
                {
                    b.Navigation("Automoviles");
                });

            modelBuilder.Entity("Entities.Entities.Cliente", b =>
                {
                    b.Navigation("Transacciones");
                });

            modelBuilder.Entity("Entities.Entities.Empleado", b =>
                {
                    b.Navigation("Transacciones");
                });

            modelBuilder.Entity("Entities.Entities.Sede", b =>
                {
                    b.Navigation("Automoviles");

                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Entities.Entities.Seguro", b =>
                {
                    b.Navigation("Automoviles");
                });
#pragma warning restore 612, 618
        }
    }
}
